- hosts: localhost
  collections:
    - mattclay.aws
  gather_facts: False
  vars:
    aws_region: "us-east-1"
    packaging_dir: "{{ playbook_dir }}/../.cache/packaging"
  tasks:
    - name: load config
      tags: always
      include_vars:
        file: config.yml
    - name: get aws account facts
      tags: always
      aws_account_facts:
    - name: show configuration
      tags: always
      debug: msg="aws_region={{ aws_region }}, aws_account_id={{ aws_account_id }}"
    - name: create iam role for terminator functions
      tags: iam
      amazon.aws.iam_role:
        name: "{{ iam_role_name }}"
        description: "iam role for terminator functions"
        state: present
        assume_role_policy_document: "{{ iam_role_policy_document }}"
        managed_policies:
          - "arn:aws:iam::aws:policy/AdministratorAccess"
      register: iam_role_info
    - name: create virtualenv with terminator requirements
      tags: lambda
      pip:
        requirements: "{{ playbook_dir }}/requirements.txt"
        virtualenv: "{{ packaging_dir }}/terminator-requirements/python"
        virtualenv_python: python3.9
    - name: package terminator requirements
      tags: lambda
      lambda_package:
        src: "{{ packaging_dir }}/terminator-requirements"
        dest: "{{ packaging_dir }}/terminator-requirements.zip"
        include:
          - "{{ packaging_dir }}/terminator-requirements/python/lib/python3.9/site-packages/*"
        exclude:
          # pre-compiled bytecode
          - "*.pyc"
          # packaging information not needed at runtime
          - "*.dist-info/*"
          # only used for botocore documentation generation
          - "{{ packaging_dir }}/terminator-requirements/python/lib/python3.9/site-packages/docutils/*"
          # installed during creation of the virtualenv
          - "{{ packaging_dir }}/terminator-requirements/python/lib/python3.9/site-packages/pip/*"
          - "{{ packaging_dir }}/terminator-requirements/python/lib/python3.9/site-packages/wheel/*"
          - "{{ packaging_dir }}/terminator-requirements/python/lib/python3.9/site-packages/setuptools/*"
          - "{{ packaging_dir }}/terminator-requirements/python/lib/python3.9/site-packages/pkg_resources/*"
          - "{{ packaging_dir }}/terminator-requirements/python/lib/python3.9/site-packages/easy_install.py"
    - name: publish terminator requirements layer
      tags: lambda
      lambda_layer:
        name: "{{ lambda_layer_name }}"
        description: "Python requirements for {{ lambda_name }}"
        compatible_runtimes:
          - python3.9
        path: "{{ packaging_dir }}/terminator-requirements.zip"
        license_info: GPL-3.0-only
        region: "{{ aws_region }}"
        state: present
      register: terminator_requirements_layer
    - name: create terminator package
      tags: lambda
      lambda_package:
        src: "{{ playbook_dir }}"
        dest: "{{ packaging_dir }}/terminator.zip"
        include:
          - "{{ playbook_dir }}/terminator_lambda.py"
          - "{{ playbook_dir }}/terminator/*.py"
    - name: deploy terminator package
      tags: lambda
      lambda:
        region: "{{ aws_region }}"
        name: "{{ lambda_name }}"
        local_path: "{{ packaging_dir }}/terminator.zip"
        runtime: python3.9
        timeout: 120
        handler: terminator_lambda.lambda_handler
        memory_size: 256
        role: "{{ iam_role_name }}"
        publish: True
        environment:
          API_NAME: "{{ api_name }}"
          CLEANUP_AWS_REGION: "{{ aws_region }}"
        layers:
          - "{{ terminator_requirements_layer.layer.layer_version_arn }}"
      register: terminator_function
    - name: alias terminator functions
      tags: lambda
      lambda_alias:
        region: "{{ aws_region }}"
        state: present
        name: "{{ lambda_alias_name }}"
        description: "{{ lambda_alias_name }} alias"
        function_name: "{{ terminator_function.meta.function_name }}"
        version: "{{ terminator_function.meta.version }}"
    - name: schedule terminator event
      tags: schedule
      cloudwatch_event:
        region: "{{ aws_region }}"
        rule_name: "{{ cloudwatch_event_name }}"
        schedule_expression: rate(4 hours)
        function_name: "{{ terminator_function.meta.function_name }}"
      register: event
    - name: schedule terminator event permissions
      tags: schedule
      lambda_policy:
        region: "{{ aws_region }}"
        function_name: "{{ terminator_function.meta.function_name }}"
        source_arn: "{{ event.meta.rule_arn }}"
        principal_service: events.amazonaws.com
